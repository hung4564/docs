import{d as m,p as k,c as y,o as c,j as t,t as o,_ as f,C as E,G as p,ah as v,a as d,w as b}from"./chunks/framework.ArdWB6UD.js";function g(s){return Array.isArray(s)&&s.length===2&&typeof s[0]=="number"&&typeof s[1]=="number"}function u(s){return Array.isArray(s)&&s.every(g)}function F(s){return Array.isArray(s)&&s.every(u)}function B(s){return Array.isArray(s)&&s.every(F)}function _(s){return s&&typeof s=="object"&&"geometry"in s}function C(s){return Array.isArray(s)?1+Math.max(0,...s.map(C)):0}function x(){return{detectGeoType:i=>{if(i!=null&&i.type&&(i!=null&&i.coordinates))return i.type;switch(C(i)){case 1:return"Point";case 2:return"LineString";case 3:return"Polygon";case 4:return"MultiPolygon";default:throw new Error("Unsupported geometry depth")}}}}function A(){const s=i=>{if(i.type==="GeometryCollection")return i.geometries.every(s);const a=i.coordinates;switch(i.type){case"Point":return g(a);case"MultiPoint":case"LineString":return u(a);case"Polygon":case"MultiLineString":return F(a);case"MultiPolygon":return B(a);default:return!1}};return{validateGeometry:s}}function S(){const{detectGeoType:s}=x(),{validateGeometry:i}=A(),a=e=>{if(!_(e))throw new Error("Invalid input: not an InputFeature");const{geometry:n,...h}=e,r=n!=null&&n.type&&(n!=null&&n.coordinates)?n:{type:s(n),coordinates:n};if(!i(r))throw new Error("Invalid geometry");return{type:"Feature",geometry:r,properties:h}};return{convertFeature:a,convertList:e=>({type:"FeatureCollection",features:e.map(a)})}}const G={class:"p-4"},T={class:"mt-4 bg-gray-100 p-2 rounded overflow-auto text-xs"},D={class:"mt-4 bg-gray-100 p-2 rounded overflow-auto text-xs"},N=m({__name:"demo",setup(s){const i=k([{name:"Test Line",geometry:[[105.8,21],[105.9,21.1]]},{name:"Test Polygon",geometry:[[[105.8,20.8],[105.9,20.8],[105.9,20.9],[105.8,20.9],[105.8,20.8]]]}]),{convertList:a}=S(),l=k(null);function e(){l.value=a(i.value)}return(n,h)=>(c(),y("div",G,[t("pre",T,o(JSON.stringify(i.value,null,2))+`
    `,1),h[0]||(h[0]=t("h2",{class:"text-xl font-bold mb-2"},"GeoJSON Converter",-1)),t("button",{class:"bg-blue-500 text-white px-3 py-1 rounded",onClick:e}," Convert "),t("pre",D,o(JSON.stringify(l.value,null,2))+`
    `,1)]))}}),w=f(N,[["__scopeId","data-v-d16e1054"]]),J=JSON.parse('{"title":"useConvertToGeoJSON","description":"","frontmatter":{"category":"Geojson"},"headers":[],"relativePath":"shared-file/useConvertToGeoJSON/index.md","filePath":"share/file/useConvertToGeoJSON/index.md","lastUpdated":1745326309000}'),O={name:"shared-file/useConvertToGeoJSON/index.md"},I=Object.assign(O,{setup(s){return(i,a)=>{const l=E("FunctionInfo"),e=E("DemoContainer");return c(),y("div",null,[a[0]||(a[0]=t("h1",{id:"useconverttogeojson",tabindex:"-1"},[d("useConvertToGeoJSON "),t("a",{class:"header-anchor",href:"#useconverttogeojson","aria-label":'Permalink to "useConvertToGeoJSON"'},"​")],-1)),p(l,{frontmatter:i.$frontmatter,package:"Share - File",fn:"useConvertToGeoJSON"},null,8,["frontmatter"]),a[1]||(a[1]=t("p",null,"Easily convert raw input data into GeoJSON format, with automatic geometry detection, validation.",-1)),a[2]||(a[2]=t("h2",{id:"demo",tabindex:"-1"},[d("Demo "),t("a",{class:"header-anchor",href:"#demo","aria-label":'Permalink to "Demo"'},"​")],-1)),p(e,null,{default:b(()=>[p(w)]),_:1}),a[3]||(a[3]=v("",9))])}}});export{J as __pageData,I as default};
